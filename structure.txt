entsearch/
  |-requirements.txt
  |-app.db
  |-uploads/entsearch/
  |-requirements.txt
  |-app.db
  |-uploads/
  |-env/.env
  |-run.py
  |-entity_serch/
    |-templates/
    |-static/
    |-views.py
    |-__init__.py
    |-repositories.py
    |-models.py
    |-registration/
        |--__init__.py
        |--views.py
        |--controller.py
    |-nlp_prediction/
        |--__init__.py
        |--views.py
        |--controller.py
    |-dataset/
        |--__init__.py
        |--views.py
        |--dataset_creating.py
        |--dataset_editing.py


#dataset/views.py
...
from entity_serch import app
@app.route('/current/<string:password>', methods=['GET'])
def current_dataset(password):
    ds_id = dataset_repo.get_id_by_password(password)
      
    if ds_id is None:
        last_elements=[]
        return render_template(
                      'edit_dataset_page.html',        
                       dataset=last_elements,
                       dataset_password=password)

    last_elements = entity_repo.last_n_elements(ds_id, 10)[::-1]
    return render_template('edit_dataset_page.html', dataset=last_elements, dataset_password=password)
...

#run.py

from entity_serch import app, socketio
socketio.run(app, debug=True)


__init__.py

import os
from flask import Flask
from flask_socketio import SocketIO
from .config import Config

app = Flask(__name__)
app.config.from_object(Config)
socketio = SocketIO(app)

os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

from .repositories import UserRepository, DatasetRepository, EntityRepository
from .models import User, Dataset, Entity, nlp_model

user_repo = UserRepository()
dataset_repo = DatasetRepository()
entity_repo = EntityRepository()

from .views import about, users
from .registration import oauth2_authorize, oauth2_callback, logout, login_page
from .dataset import create_dataset,  dataset_detail, create_dataset_page, current_dataset, datasets, add_entity
from .nlp_prediction import handle_prediction, prediction_page


if __name__ == '__main__':
    socketio.run(app,  debug=True)
